# üß© Low-Level Design (LLD) Roadmap ‚Äì JavaScript Focused

A concise path to learn LLD using JS, focusing on OOP, design principles, and system design problems.

---

## ‚úÖ Step 1: Master OOP in JavaScript

- Classes, objects, inheritance, composition
- Encapsulation, polymorphism, abstraction
- Private/public fields, static methods

**Resources:**
- [MDN OOP in JS](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS)
- You Don‚Äôt Know JS ‚Äì Objects & Classes

---

## ‚úÖ Step 2: Understand SOLID Principles

- **S**: One class = one responsibility  
- **O**: Extendable, not modifiable  
- **L**: Subtypes should not break the base type  
- **I**: Keep interfaces lean  
- **D**: Depend on abstractions  

**Quick Read**: [SOLID Made Easy](https://medium.com/swlh/solid-principles-made-easy-67b1246bcdf)

---

## ‚úÖ Step 3: Learn Key Design Patterns

- **Creational**: Singleton, Factory  
- **Structural**: Adapter, Decorator  
- **Behavioral**: Strategy, Observer  

**Resource**: [Refactoring Guru](https://refactoring.guru/design-patterns)

---

## ‚úÖ Step 4: UML Basics

- Class diagrams: attributes, methods, relationships  
- Inheritance vs Composition  
- Use [draw.io](https://draw.io) to practice

---

## ‚úÖ Step 5: Solve LLD Problems (in JS)

Build and document these systems:

- [ ] Parking Lot  
- [ ] Library System  
- [ ] Vending Machine  
- [ ] Snake & Ladder  
- [ ] ATM Machine  
- [ ] Tic-Tac-Toe  

For each:
- Design class diagram
- Write JS implementation using OOP
- Add brief README

---

## üìÅ Suggested Folder Structure

